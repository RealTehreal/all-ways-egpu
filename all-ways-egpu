#!/usr/bin/env sh

BINDIR=/usr/bin
USER_IDS_DIR=/usr/share/all-ways-egpu
PCI_DEV=$USER_IDS_DIR/user-bus-ids
CONFDIR=/etc/all-ways-egpu
VERSION=0.40.0

setupConfig() {
	if [ "${2}" -eq 1 ]; then
		USER_IDS_DIR=/home/$SUDO_USER/.config/all-ways-egpu
		PCI_DEV=$USER_IDS_DIR/user-bus-ids
	fi
	mkdir -p "$USER_IDS_DIR"

	if [ -e "$PCI_DEV" ] || [ -e "$USER_IDS_DIR"/egpu-bus-ids ]; then
		echo "Existing configuration file detected, would you like to overwrite it? [y/N]"
		read -r OW_RES
		if [ "$OW_RES" = "y" ]; then
			rm -f "$PCI_DEV"
			rm -f "$USER_IDS_DIR"/egpu-bus-ids
		else
			echo "Existing configuration not changed, exiting setup."
			setupAutostart "${2}"
			return
		fi
	fi
	echo 0 > "$USER_IDS_DIR"/0
	echo 1 > "$USER_IDS_DIR"/1

	if [ "${1}" -eq 1 ]; then
		echo "$(lspci -n)" > "$USER_IDS_DIR"/user-temp-ids
	else
		if [ "${1}" -eq 2 ]; then
			touch "$USER_IDS_DIR"/user-temp-ids
		else
			echo "$(lspci -d ::0300 -n && lspci -d ::0302 -n && lspci -d ::0403 -n)" > "$USER_IDS_DIR"/user-temp-ids
		fi
	fi
	cp "$USER_IDS_DIR"/user-temp-ids "$USER_IDS_DIR"/user-temp-ids-2

	printf "To force the eGPU as primary, we need to know which card is the eGPU to be used as primary.\n\n"

	while read -r CARDS <&3; do
		PCI_BUS=$(echo "$CARDS" | awk -F' ' '{print $1}')
		#DEV_IDS=$(echo "$CARDS" | awk -F' ' '{print $3}')
		DEV_DRIVERS=$(lspci -k | grep -A 3 "$PCI_BUS" | awk -F': ' 'index($1, "Kernel driver") { print $2 }')
		lspci | grep "$PCI_BUS"
		printf "Is this the eGPU to be used as primary? [y/N]\n"
		read -r DIS_RES

		if [ "$DIS_RES" = "y" ]; then
			printf 'Using %s as primary\n\n' "$PCI_BUS"
			printf '%s %s\n' "$PCI_BUS" "$DEV_DRIVERS" >> "$USER_IDS_DIR"/egpu-bus-ids
			sed -i /"$PCI_BUS"/d "$USER_IDS_DIR"/user-temp-ids-2
		else
			printf 'Not using %s as primary\n\n' "$PCI_BUS"
		fi
	done 3<"$USER_IDS_DIR"/user-temp-ids
	
	if [ ! -e "$USER_IDS_DIR"/egpu-bus-ids ]; then
		manualSetup "$USER_IDS_DIR"/egpu-bus-ids
	fi

	printf "Identify all iGPU/dGPUs to be potentially disabled at boot:\n\n"

	while read -r CARDS <&3; do
		PCI_BUS=$(echo "$CARDS" | awk -F' ' '{print $1}')
		#DEV_IDS=$(echo "$CARDS" | awk -F' ' '{print $3}')
		DEV_DRIVERS=$(lspci -k | grep -A 3 "$PCI_BUS" | awk -F': ' 'index($1, "Kernel driver") { print $2 }')
		lspci | grep "$PCI_BUS"
		printf "Would you like to disable this device during boot [y/N]\n"
		read -r DIS_RES

		if [ "$DIS_RES" = "y" ]; then
			printf '\n'
			printf '%s %s\n' "$PCI_BUS" "$DEV_DRIVERS" >> "$PCI_DEV"
		else
			printf 'Not disabling %s\n\n' "$PCI_BUS"
		fi
	done 3<"$USER_IDS_DIR"/user-temp-ids-2

	if [ ! -e "$PCI_DEV" ]; then
		manualSetup "$PCI_DEV"
	fi

	rm -f "$USER_IDS_DIR"/user-temp-ids
	rm -f "$USER_IDS_DIR"/user-temp-ids-2
	setupAutostart "${2}"
}

setupAutostart() {
	if [ ! -e $CONFDIR/all-ways-egpu.service ]; then
		return
	fi

	if [ "${1}" -eq 1 ]; then
		echo "Note startup files will use system configuration, not user configuration"
	fi

	echo "Recommended if using Method 1: Attempt to re-enable the iGPU/initially disabled devices after login? [y/N]"
	read -r EN_RES

	echo " Recommended if using Method 2: Attempt to set boot_vga flag at startup? [y/N]"
	read -r EN_RES_2

	if [ "$SERV_MAN" = "systemd" ]; then
		SYSDIR=/etc/systemd/system
		cp $CONFDIR/all-ways-egpu.service ${SYSDIR}

		if [ "$EN_RES" = "y" ]; then
			cp $CONFDIR/all-ways-egpu-user.service ${SYSDIR}
			for UP in /home/*/.config/autostart; do
				cp $CONFDIR/all-ways-egpu-reenable.desktop "$UP"/
			done
		else
			rm -f /home/*/.config/autostart/all-ways-egpu-reenable.desktop
		fi
		if [ "$EN_RES_2" = "y" ]; then
			cp $CONFDIR/all-ways-egpu-boot-vga.service ${SYSDIR}
			cp $CONFDIR/all-ways-egpu-shutdown.service ${SYSDIR}
			systemctl enable all-ways-egpu-boot-vga.service
			systemctl enable all-ways-egpu-shutdown.service
		else
			systemctl disable all-ways-egpu-boot-vga.service
			systemctl disable all-ways-egpu-shutdown.service
		fi

	else
		if [ "$SERV_MAN" = "openrc" ]; then
			if [ -e /etc/init.d ]; then
				SYSDIR=/etc/init.d
			else
				SYSDIR=/etc/openrc/init.d
			fi
			cp $CONFDIR/all-ways-egpu-openrc ${SYSDIR}
			chmod +x ${SYSDIR}/all-ways-egpu-openrc

			if [ "$EN_RES" = "y" ]; then
				echo "Re-enable after login not currently supported without systemd"
			fi
			if [ "$EN_RES_2" = "y" ]; then
				cp $CONFDIR/all-ways-egpu-boot-vga-openrc ${SYSDIR}
				chmod +x ${SYSDIR}/all-ways-egpu-boot-vga-openrc
				rc-update add all-ways-egpu-boot-vga-openrc default
			else
				rc-update delete all-ways-egpu-boot-vga-openrc default
			fi
		fi
	fi
}

manualSetup() {
	IDS_FILE="${1}"
	printf "Manual Setup: Enter Bus IDs and drivers in the following example format or enter 'n' to skip.\nxx:xx.x driver\n"
	while true; do
		read -r MAN_ID
		if [ "$MAN_ID" = "n" ]; then
            break
        fi
		echo "$MAN_ID" >> "$IDS_FILE"
		echo "Enter another ID and driver or enter 'n' if done."
	done
}

removeIDs() {
	IDS_FILE="${1}"
	if [ ! -e "$IDS_FILE" ]; then
		echo "Error: No configuration file. Please run setup."
		return
	fi

	if [ "$SERV_MAN" = "systemd" ]; then
		START_CMD="systemctl start display-manager.service"
		STOP_CMD="systemctl stop display-manager.service"
	else
		if [ "$SERV_MAN" = "openrc" ]; then
			START_CMD="rc-service display-manager start"
			STOP_CMD="rc-service display-manager stop"
		else
			echo "No way to restart display-manager found"
			return
		fi
	fi

	( trap '' HUP TERM
		sleep 1

		set -- /sys/class/vtconsole/vtcon*/bind
		for VT in "$@"; do
			echo 0 > "$VT"
		done

		while read -r LINE; do
			BUS=$(echo "$LINE"  | awk '{ print $1 }')
			DRIVER=$(echo "$LINE" | awk '{ print $2 }')

			echo "0000:""$BUS" > /sys/bus/pci/drivers/"$DRIVER"/unbind
			echo 1 > /sys/bus/pci/devices/0000:"$BUS"/remove
		done < "$IDS_FILE"
		set -- /sys/class/vtconsole/vtcon*/bind
		for VT in "$@"; do
			echo 1 > "$VT"
		done
		$START_CMD ) &
	$STOP_CMD
}

addInternal() {
	echo 1 > /sys/bus/pci/rescan
}

setBootVGA() {
	if [ ! -e "$USER_IDS_DIR"/egpu-bus-ids ]; then
		echo "Error: No configuration file. Please run setup."
		return
	fi

	removeBootVGA

	EGPU_DETECT=0

	for CARD in $(lspci -d ::0300 | cut -c -7); do
		set -- /sys/bus/pci/devices/0000:"$CARD"/drm/card*/device
		for BOOT_VGA_PATH in "$@"; do
			if grep -q "$CARD" < "$USER_IDS_DIR"/egpu-bus-ids; then
				echo "$BOOT_VGA_PATH"  | tee -a "$USER_IDS_DIR"/bind-paths
				mount -n --bind -o ro "$USER_IDS_DIR"/1  "$BOOT_VGA_PATH"/boot_vga
				EGPU_DETECT=1
			else
				if grep -q "1" < "${BOOT_VGA_PATH}"/boot_vga; then
					echo "$BOOT_VGA_PATH"  | tee -a "$USER_IDS_DIR"/bind-paths
					mount -n --bind -o ro "$USER_IDS_DIR"/0 "$BOOT_VGA_PATH"/boot_vga
				fi
			fi
		done
	done

	if [ $EGPU_DETECT -eq 1 ]; then
		echo "Bind mounts set. Restart Display Manager for changes to take effect."
	else
		echo "No eGPU detected."
		subRemoveVGA "$USER_IDS_DIR"
	fi
}

removeBootVGA() {
	if [ -e /usr/share/all-ways-egpu/bind-paths ]; then
		echo "Existing bind mounts recorded. Removing..."
		subRemoveVGA /usr/share/all-ways-egpu
		echo "Bind mounts removed successfully. Restart Display Manager for changes to take effect."
	fi
	for BP in /home/*/.config; do
		if [ -e "$BP"/all-ways-egpu/bind-paths ]; then
			printf "Removing bind mounts recorded at %s...\n" "$BP/all-ways-egpu/bind-paths"
			subRemoveVGA "$BP"/all-ways-egpu
			echo "Bind mounts removed successfully. Restart Display Manager for changes to take effect."
		fi
	done
#	echo "Error: No bind mounts recorded. Use "all-ways-egpu set-boot-vga egpu" to set mounts or reboot to reset mounts"
}

subRemoveVGA() {
	BIND_PATHS="${1}"/bind-paths
	while read -r LINE; do
		umount -n "$LINE"/boot_vga
	done < "$BIND_PATHS"
	rm -f "$BIND_PATHS"
}

uninstall() {
	removeBootVGA
	rm -f ${BINDIR}/all-ways-egpu
	rm -f /home/*/bin/all-ways-egpu
	if [ "$SERV_MAN" = "systemd" ]; then
		SYSDIR=/etc/systemd/system
		systemctl disable all-ways-egpu.service
		systemctl disable all-ways-egpu-boot-vga.service
		systemctl disable all-ways-egpu-shutdown.service
		rm -f ${SYSDIR}/all-ways-egpu.service
		rm -f ${SYSDIR}/all-ways-egpu-user.service
		rm -f ${SYSDIR}/all-ways-egpu-boot-vga.service
		rm -f ${SYSDIR}/all-ways-egpu-shutdown.service
	else
		if [ "$SERV_MAN" = "openrc" ]; then
			if [ -e /etc/init.d ]; then
				SYSDIR=/etc/init.d
			else
				SYSDIR=/etc/openrc/init.d
			fi
			rc-update delete all-ways-egpu-openrc default
			rc-update delete all-ways-egpu-boot-vga-openrc default
			rm -f ${SYSDIR}/all-ways-egpu-openrc
			rm -f ${SYSDIR}/all-ways-egpu-boot-vga-openrc
		else
			echo "Service Files not found, not removed"
		fi
	fi
	rm -rf /usr/share/all-ways-egpu
	rm -rf /home/*/.config/all-ways-egpu
	rm -f /home/*/.config/autostart/all-ways-egpu-reenable.desktop
	rm -f /usr/share/applications/all-ways-egpu.desktop
	rm -f /home/*/.local/share/applications/all-ways-egpu.desktop
	rm -rf $CONFDIR
}

help() {
	echo "Valid arguments are \"configure egpu|internal\", \"switch egpu|internal\", \"set-boot-vga egpu|internal\", \"boot\", \"setup [--all]|[--manual]\" or \"uninstall\"."
	printf "Example: sudo all-ways-egpu setup\n\n"
	echo "Usage:"
	echo "Method 1:"
	echo "To force the eGPU as primary, run: sudo all-ways-egpu switch egpu"
	echo "This will temporarily remove any internal graphics and restart the display manager, logging you out. The login screen should then display on the eGPU connected display"
	echo "To re-enable integrated graphics, restart, or run: sudo all-ways-egpu internal"
	echo "If this works for you, you may run the following command to automatically switch to eGPU on every boot up:"
	echo "sudo all-ways-egpu configure egpu"
	echo "In this mode, the script should default back to iGPU on boot up if no eGPU is connected."
	echo "Method 2:"
	echo "To only switch the boot_vga flag, run: sudo all-ways-egpu set-boot-vga egpu"
	echo "This may be a useful method for enabling the eGPU in certain Wayland desktops and may work better than Method 1 for some setups"
    printf "\nIf using the menu system, it is recommended to first setup system with option 1, then use option 4 to switch to eGPU.\n"
}

# check if the script is run as root
if [ "$(whoami)" != "root" ]; then
	echo "You need to run the script with root privileges. Attempting to raise via sudo:"
	sudo "${0}" "$@"
	exit $?
fi

# try to detect the current user configuration if it exists
if [ "$SUDO_USER" != "" ]; then
	if [ -e /home/"$SUDO_USER"/.config/all-ways-egpu/egpu-bus-ids ] || [ -e /home/"$SUDO_USER"/.config/all-ways-egpu/user-bus-ids ]; then
		USER_IDS_DIR=/home/$SUDO_USER/.config/all-ways-egpu
		PCI_DEV=$USER_IDS_DIR/user-bus-ids
	fi
fi

# check for write permissions
if [ -w /usr ]; then
	user_mode=0
else
	user_mode=1
fi

# check if using systemd or openrc
if [ -e "$(command -v systemctl)" ]; then
	SERV_MAN="systemd"
else
	if [ -e "$(command -v rc-status)" ]; then
		SERV_MAN="openrc"
	fi
fi

case $1 in
	-h|help)
	help
	exit 0
		;;
	setup)
		override=0
		for option in "$@"; do
			if [ "${option}" = "--all" ]; then
				override=1
			fi
			if [ "${option}" = "--manual" ]; then
				override=2
			fi
			if [ "${option}" = "--system" ]; then
				user_mode=0
			fi
			if [ "${option}" = "--user" ]; then
				user_mode=1
			fi
		done
		setupConfig ${override} ${user_mode}

		echo "Configuration files sucessfully created. See help for usage information"
		;;
	configure)
		if [ "$SERV_MAN" = "systemd" ]; then
			ENABLE_CMD="systemctl enable all-ways-egpu.service"
			DISABLE_CMD="systemctl disable all-ways-egpu.service"
		else
			if [ "$SERV_MAN" = "openrc" ]; then
				ENABLE_CMD="rc-update add all-ways-egpu-openrc default"
				DISABLE_CMD="rc-update delete all-ways-egpu-openrc default"
			else
				echo "No way to run service files found"
				exit 1
			fi
		fi
		for option in "$@"; do
			if [ "${option}" = "egpu" ]; then
				$ENABLE_CMD
				exit
			else
				if [ "${option}" = "internal" ]; then
					$DISABLE_CMD
					exit
				fi
			fi
		done
		echo "Specifiy 'egpu' or 'internal' to be configured to be used at boot"
		;;
	switch)
		cardSelect=0
		for option in "$@"; do
			if [ "${option}" = "egpu" ]; then
				cardSelect=1
			else
				if [ "${option}" = "internal" ]; then
					cardSelect=2
				fi
			fi
			if [ "${option}" = "--remove-egpu" ]; then
				cardSelect=3
			fi
		done
		case $cardSelect in
			1)
				removeIDs "$PCI_DEV"
				;;
			2)
				addInternal
				;;
			3)
				addInternal
				removeIDs "$USER_IDS_DIR"/egpu-bus-ids
				;;
			*)
				echo "Specifiy 'egpu' or 'internal' to be switched to"
				;;
		esac
		;;
	set-boot-vga)
		cardSelect=0
		for option in "$@"; do
			if [ "${option}" = "egpu" ]; then
				cardSelect=1
			else
				if [ "${option}" = "internal" ]; then
					cardSelect=2
				fi
			fi
		done
		if [ ${cardSelect} -eq 2 ]; then
			removeBootVGA
			exit
		else
			if [ ${cardSelect} -eq 1 ]; then
				setBootVGA
				exit
			fi
		fi
		echo "Specifiy 'egpu' or 'internal' to be switched to"
		;;
	boot)
		for CARD in $(lspci -d ::0300 | cut -c -7); do
			if ! grep -q "$CARD" < "$PCI_DEV"; then
			DISP_NUM=0
			DISP_DISCON=0
			set -- /sys/class/drm/card[0-9]*/card[0-9]*-*
			for DISP in "$@"; do
				if ! grep -q "$(find -L "$DISP/../device/driver" -maxdepth 1 -name '[0-9a-f]*:[0-9a-f]*:[0-9a-f]*' | tail -c 8)" < "$PCI_DEV"; then
					if [ -e "$DISP/status" ]; then
						DISP_NUM=$((DISP_NUM + 1))
						DISP_DISCON=$((DISP_DISCON + $(grep -ce ^disconnected < "$DISP/status"))) || true
					fi
				fi
			done
			if [ "$DISP_DISCON" -eq "$DISP_NUM" ] && [ "$DISP_NUM" -gt 0 ]; then
				echo "No eGPU attached display detected with open source drivers. (Of ${DISP_NUM} eGPU outputs detected) Internal mode and setting DRI_PRIME variable are recommended for this configuration."
				exit
			else
				removeIDs "$PCI_DEV"
			fi
			fi
		done
		echo "No eGPU detected"
		;;
	uninstall)
		uninstall
		echo "all-ways-eGPU uninstalled"
		;;
	*)
	#Menu
	while true; do
		clear
		echo "-------------------------"
		echo " All-Ways-eGPU Main Menu"
		echo "-------------------------"
		echo "1. Guided Setup"
		echo "2. Manual Setup"
		echo "3. Disable a GPU (Method 1)"
		echo "4. Set boot-vga Flag (Method 2)"
		echo "5. Help"
		echo "6. Version"
		echo "7. Uninstall all-ways-eGPU"
		printf "8. Exit\n\n"
		echo "Enter Choice [1-8]: "
		read -r MENU_CHOICE
		case $MENU_CHOICE in
			1)
				setupConfig 0 ${user_mode}
				echo "Setup sucessfully. See help for usage information"
				echo "Press [Enter] to return to menu."
				read -r MENU_CHOICE
				;;
			2)
				setupConfig 2 ${user_mode}
				echo "Press [Enter] to return to menu."
				read -r MENU_CHOICE
				;;
			3) clear
				echo "1. Remove iGPU/dGPU now?"
				echo "2. Remove eGPU now? (May allow hot-unplug)"
				printf "3. Configure automatic disabling of iGPU/dGPU at boot\n\n"
				echo "Enter Choice [1-3]: "
				read -r MENU_CHOICE
				case "${MENU_CHOICE}" in
					1)
						removeIDs "$PCI_DEV"
						;;
					2)
						removeIDs "$USER_IDS_DIR"/egpu-bus-ids
						;;
					3)
						echo "Would you like to automatically disable iGPU at boot? [y/N]: "
						read -r MENU_CHOICE
							if [ "${MENU_CHOICE}" = "y" ]; then
								all-ways-egpu configure egpu
							else
								all-ways-egpu configure internal
							fi
						;;
					*)
						echo "Error: $MENU_CHOICE not a valid option."
						;;
				esac
				sleep 2
				;;
			4) clear
				echo "1. Set boot-vga Flag to eGPU"
				echo "2. Set boot-vga Flag to default (iGPU/dGPU)"
				printf "3. Configure boot-vga Flag at boot\n\n"
				echo "Enter Choice [1-3]: "
				read -r MENU_CHOICE
				case "${MENU_CHOICE}" in
					1)
						setBootVGA
						;;
					2)
						removeBootVGA
						;;
					3)
						setupAutostart ${user_mode}
						;;
					*)
						echo "Error: $MENU_CHOICE not a valid option."
						;;
				esac
				echo "Press [Enter] to return to menu."
				read -r MENU_CHOICE
				;;
			5) help
				echo "Press [Enter] to return to menu."
				read -r MENU_CHOICE
				;;
			6) echo "all-ways-egpu version: $VERSION"
				echo "Press [Enter] to return to menu."
				read -r MENU_CHOICE
				;;
			7) echo "Are you sure you want to uninstall? This will remove all configuration files. [y/N]: "
				read -r MENU_CHOICE
				if [ "${MENU_CHOICE}" = "y" ]; then
					uninstall
					echo "all-ways-eGPU uninstalled" && sleep 2
					exit
				fi
				;;
			8) exit
				;;
			*) echo "Error: $MENU_CHOICE not a valid option." && sleep 2
				;;
		esac
	done
		;;
esac
