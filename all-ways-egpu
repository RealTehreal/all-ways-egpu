#!/usr/bin/env sh

USER_IDS_DIR=/usr/share/all-ways-egpu

setupConfig() {
	if [ -e $USER_IDS_DIR/user-bus-ids ]; then
		echo "Existing configuration file detected, would you like to overwrite it? [y/N]"
		read -r OW_RES
		if [ "$OW_RES" = "y" ]; then
			rm -f $USER_IDS_DIR/user-bus-ids
		else
			echo "Existing configuration not changed, exiting setup."
			return
		fi
	fi

	printf "To force the eGPU as primary, it is recommended to disable all iGPU/dGPU at boot:\n"

	if [ "${1}" -eq 1 ]; then
		echo "$(lspci -n)" > $USER_IDS_DIR/user-temp-ids
	else
		echo "$(lspci -d ::0300 -n && lspci -d ::0302 -n && lspci -d ::0403 -n)" > $USER_IDS_DIR/user-temp-ids
	fi

	while read -r CARDS <&3; do
		PCI_BUS=$(echo "$CARDS" | awk -F' ' '{print $1}')
		DEV_IDS=$(echo "$CARDS" | awk -F' ' '{print $3}')
		DEV_DRIVERS=$(lspci -k | grep -A 3 "$PCI_BUS" | awk -F': ' 'index($1, "Kernel driver") { print $2 }')
		lspci | grep "$PCI_BUS"
		printf "Would you like to disable this device during boot [y/N]\n"
		read -r DIS_RES

		if [ "$DIS_RES" = "y" ]; then
			printf '%s %s\n' "$PCI_BUS" "$DEV_DRIVERS" >> $USER_IDS_DIR/user-bus-ids
		else
			echo "Not disabling ""$PCI_BUS"
		fi
	done 3<$USER_IDS_DIR/user-temp-ids
	rm -f $USER_IDS_DIR/user-temp-ids
}

removeInternal() {
	if [ ! -e $USER_IDS_DIR/user-bus-ids ]; then
		echo "Error: No configuration file. Please run setup."
		exit
	fi

	( trap '' HUP TERM
		while [ "$(systemctl status display-manager | awk '/Active:/{print$2}')" \
			= "active" ]; do
			sleep 1
		done

		set -- /sys/class/vtconsole/vtcon*/bind
		for VT in "$@"; do
			echo 0 > "$VT"
		done

		PCI_DEV=$(cat $USER_IDS_DIR/user-bus-ids)
		echo "$PCI_DEV" | while read -r LINE; do
			BUS=$(echo "$LINE"  | awk '{ print $1 }')
			DRIVER=$(echo "$LINE" | awk '{ print $2 }')

			echo "0000:""$BUS" > /sys/bus/pci/drivers/"$DRIVER"/unbind
			echo 1 > /sys/bus/pci/devices/0000:"$BUS"/remove
		done
		set -- /sys/class/vtconsole/vtcon*/bind
		for VT in "$@"; do
			echo 1 > "$VT"
		done
		systemctl start display-manager.service ) &
	systemctl stop display-manager.service
}

addInternal() {
	echo 1 > /sys/bus/pci/rescan
}

# check if the script is run as root
if [ "$(whoami)" != "root" ]; then 
	echo "You need to run the script with root privileges"
	exit
fi

case $1 in
	-h|help)
	echo "Valid arguments are \"configure egpu|internal\", \"switch egpu|internal\", \"boot\" or \"setup [--all]\"."
	echo "Example: sudo all-ways-egpu setup\n"
	echo "Usage:"
	echo "To force the eGPU as primary, run: sudo all-ways-egpu switch egpu"
	echo "This will temporarily remove any internal graphics and restart the display manager, logging you out. The login screen should then display on the eGPU connected display"
	echo "To re-enable integrated graphics, restart, or run: sudo all-ways-egpu internal"
	echo "If this works for you, you may run the following command to automatically switch to eGPU on every boot up:"
	echo "sudo all-ways-egpu configure egpu"
	echo "In this mode, the script should default back to iGPU on boot up if no eGPU is connected."

	exit 0
		;;
	setup)
		override=0
		for option in "$@"; do
			if [ "${option}" = "--all" ]; then
				override=1
			fi
		done
		setupConfig ${override}

		echo "Attempt to re-enable these iGPU/initially disabled devices after login (recommended)? [y/N]"
		read -r EN_RES

		if [ "$EN_RES" = "y" ]; then
			for UP in /home/*/.config/autostart; do
				cp /usr/share/all-ways-egpu/all-ways-egpu-reenable.desktop "$UP"/
			done
		else
			rm -f /home/*/.config/autostart/all-ways-egpu-reenable.desktop
		fi

		echo "Configuration files sucessfully created. See help for usage information"
		;;
	configure)
		for option in "$@"; do
			if [ "${option}" = "egpu" ]; then
				systemctl enable all-ways-egpu.service
				exit
			else
				if [ "${option}" = "internal" ]; then
					systemctl disable all-ways-egpu.service
					exit
				fi
			fi
		done
		echo "Specifiy 'egpu' or 'internal' to be configured to be used at boot"
		;;
	switch)
		cardSelect=0
		for option in "$@"; do
			if [ "${option}" = "egpu" ]; then
				cardSelect=1
			else
				if [ "${option}" = "internal" ]; then
					cardSelect=2
				fi
			fi
		done
		if [ ${cardSelect} -eq 1 ]; then
			removeInternal
			exit
		else
			if [ ${cardSelect} -eq 2 ]; then
				addInternal
				exit
			fi
		fi
		echo "Specifiy 'egpu' or 'internal' to be switched to"
		;;
	boot)
		if [ "$(find /dev/dri/card* | wc -l)" -gt 1 ]; then
			removeInternal
		fi
		;;
	*)
	echo "Unknown argument: ${1}."
	echo "Valid arguments are \"configure egpu|internal\", \"switch egpu|internal\", \"boot\" or \"setup [--all]\"."
	echo "Example: sudo all-ways-egpu setup"
	echo "Example: sudo all-ways-egpu switch egpu"
	exit 1
		;;
esac
